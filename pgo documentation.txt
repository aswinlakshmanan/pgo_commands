Installing kubernetes on Minikube (Set up of Kubernetes Cluster on Local Machines)

minikube start

If minikube is not installed, then install minikube on ubuntu terminal by following the commands:-

Step 1: Updating the system and installing the required packages

sudo apt-get update -y
sudo apt-get upgrade -y

Also, install the necessary and required  packages as follows:-

sudo apt-get install curl
sudo apt-get install apt-transport-https

Step 2: Install VirtualBox Hypervisor

	1. To install virtual box on ubuntu follow the commands:-
	   sudo apt install virtualbox virtualbox-ext-pack

Step 3: Install Minikube

	1. Download the latest minikube binary using the wget command
	wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
	
	2. Copy the file downloaded and store them in the minikube directory(/usr/local/bin/minikube)
	sudo cp minikube-linux-amd64 /usr/local/bin/minikube
	
	3.Give file permissions using chmod 
	sudo chmod 755 /usr/local/bin/minikube
	
	4. Verify for the succesful installation of minikube 
`	minikube version

Step 4: Install Kubectl
Kubectl is used to manage and deploy clusters.

	1.Download Kubectl using the command
	curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s 	https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl

	2.making the binary executable
	chmod +x ./kubectl

	3.moving the binary into the path
	sudo mv ./kubectl /usr/local/bin/kubectl

	4.Verify the kubectl installation
	kubectl version -o json

Step 5: Start the minikube

minikube start

So, once we start the minikube it will install some of the packages.

Step 6: Creating namespaces in pgo

kubectl create namespace pgo

If we did not mention any namespace, the postgres operator will take the namespace as  pgo by default.

Step 7 : We will have to download the postgresql operator installer to our environment set up

curl https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.4.1/installers/kubectl/postgres-operator.yml > postgres-operator.yml

Step 8: Installing the Client Setup

chmod +x client-setup.sh

Once the Postgresql is done installing the client.sh, run the client setup using the following command :-

./client-setup.sh

Now, we can go forward and type in the following command 

kubectl apply -f postgres-operator.yml

./client-setup.sh

Step 9:  Once the client-setup.sh script is run, it will prompt us to add some environmental variables to bre deployed in our session like:-

export PGOUSER="${HOME?}/.pgo/pgo/pgouser"
export PGO_CA_CERT="${HOME?}/.pgo/pgo/client.crt"
export PGO_CLIENT_CERT="${HOME?}/.pgo/pgo/client.crt"
export PGO_CLIENT_KEY="${HOME?}/.pgo/pgo/client.key"
export PGO_APISERVER_URL='https://127.0.0.1:8443'
export PGO_NAMESPACE=pgo

Step 10: Now, we will have to create a postgresql cluster

pgo create cluster -n pgo lak

Here, the name of the cluster is lak.

Step 11: We can check for the status of the cluster created by using the pgo test command

pgo test -n pgo lak

pgo test provides us the basic information that we require for us to connect with postgresql cluster from within the kubernetes environment.

Step 12: Now, by default the postgresql operator will create a database under the cluster with the same name of the the cluster name so, in our case it is lak..

We can get the information about the  user in the cluster by using pgo show user command

pgo show user -n pgo lak

Now we will create another cluster named hippo
pgo create cluster -n pgo hippo

Step 13: we can delete the cluster under lak cluster
pgo delete cluster -n pgo lak

This command will prompt us with a warning message saying that all the datas underlying in this file will be deleted.

pgo test -n pgo hippo

Step 14: Here, we create different users under hippo cluster
pgo create user --username=human1 --selector=name=hippo

this will create a user under the cluster named hippo with the name of the user as human1.It also displays the status of the user are they created ot not and also displays ierror in case of any falseness.

Step 15: Here, we can use the following command to manage the users in a particular cluster.

pgo create user --username=manageduser  --selector=name=hippo

pgo create user --username=admin  --managed  --selector=name=hippo

pgo show user --all :- this command will list all the  users present in the cluster hippo

Step 16: Here,we create a cluster named group with cpu and memory constraints (i.e) cpu with 4 processors and memory with 8gb capacity.

pgo create cluster group --cpu=4  --memory=8Gi

Here in the following command, we create a replica set of data and then, we always set it to 2
pgo scale group --replica-count=2

pgo create cluster problem  --cpu=4  --memory=8Gi  --replica-count=2

pgo create cluster sample --node-label=manage=master  --cpu=2 --memory=2Gi  --replica-count=2  --memory=1Gi -n pgo

Step 17: We will create  a new cluster with service type as load balancer.
pgo create cluster load --service-type=LoadBalancer


















 









	
	
	
	 









